PATH4 = "C:/Users/Rubens Jr/Documents/NetBeansProjects/Programa/r/MK_WGRP.R"
source(PATH4)
data_base_x = c(1:40)
data_base_types = c("P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C","P", "C")
n_x = length(data_base_x)
mle_objs = getMLE_objs(timesBetweenInterventions=data_base_x, interventionsTypes=data_base_types) # Importante
df = summarizeICsAndParametersTable(mle_objs, data_base_x, "C:/Users/Public/") #resultado do getMLE. Precisa ser exibido (tabela df)
optimum = getOptimum(mle_objs, df)
if(is.null(optimum$propagations)==TRUE){optimum$propagations = rep(1, n_x)}
m=2; pmPropagations = c(optimum$propagations, rep(PROPAGATION$KijimaII, m)); parameters = getParameters(nSamples=1000, nInterventions=(n_x+m), a=optimum$a, b=optimum$b, q=optimum$q, propagations = pmPropagations);
bSample = bootstrapSample(parameters);#theoreticalMoments = sampleConditionalMoments(parameters);
theoreticalMoments = sampleConditionalMoments(parameters)
forecasting = graphicStudyOfCumulativeTimes(x=data_base_x, bootstrapSample= bSample, conditionalMeans = theoreticalMoments, parameters=parameters);
computeForecastingTable(forecasting, 0, paste(PATH5, "TableIC.txt", sep = ""));
PATH5 = "C:/Users/Rubens Jr/Google Drive/MESOR/_Orientandos/RubensOliveira/"
computeForecastingTable(forecasting, 0, paste(PATH5, "TableIC.txt", sep = ""));
